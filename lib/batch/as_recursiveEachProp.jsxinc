// Copyright (c) 2019 Oleksandr Semeniuk
// This code is licensed under MIT license
// See also http://www.opensource.org/licenses/mit-license.php

// version: 1.0.0
// date: Jul 22 2019

 /**
  * @description Applies function for each property
  * @param propGroup Property or property group
  * @param func {Function} First argument always is target property!
  * @param args {array} Arguments for function
  * @param filterMatchNames {array}
  * @returns Array with results
  */
function as_recursiveEachProp(propGroup, func, args, filterMatchNames) {

	// CHECK ARGS
	if(args === undefined) {
    	args = [];
	}
	
	// VARS
	var results = [];

	// LOOP
	if (propGroup.propertyType === PropertyType.PROPERTY) {

		// CHECK MATCHNAMES
		if((filterMatchNames !== undefined) && (filterMatchNames.length > 0) && (as_arrayCheckValue(propGroup.matchName, filterMatchNames) == -1)) {
            return results;
		}
		results.push(func.apply(undefined, [propGroup].concat(args)));
		
	} else /*if ((propGroup.propertyType === PropertyType.INDEXED_GROUP) || (propGroup.propertyType === PropertyType.NAMED_GROUP))*/ {
		for (var p = 1, prop; p <= propGroup.numProperties; p++) {
			prop = propGroup.property(p);
			results = results.concat(as_recursiveEachProp(prop, func, args));
		}
	}

	// RETURN
	return results;
}
